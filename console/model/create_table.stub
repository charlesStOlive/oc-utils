<?php namespace {{studly_author}}\{{studly_plugin}}\Updates;

use Winter\Storm\Database\Schema\Blueprint;
use Winter\Storm\Database\Updates\Migration;
use Schema;

class Create{{studly_plural_name}}Table extends Migration
{
    public function up()
    {
        Schema::create('{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}', function (Blueprint $table) {
            $table->engine = 'InnoDB';
{% if configs.string_id %}
            $table->string('id')->primary();
{% else %}
            $table->increments('id');
{% endif %}
{% for db in dbs  %}
{% if db.type == 'liaison_id' %}
            $table->integer('{{db.var|snakeCase}}_id')->unsigned(){% if not db.not_null %}->nullable(){%endif%};
{% elseif db.type == 'string_id' %}
            $table->string('{{db.var|snakeCase}}_id'){% if not db.not_null %}->nullable(){%endif%};
{% elseif db.type == 'double' %}
            $table->double('{{db.var|snakeCase}}', 15, 2){% if not db.not_null %}->default(0){%endif%};
{% elseif db.type == 'integer' %}
            $table->integer('{{db.var|snakeCase}}'){% if not db.not_null %}->nullable(){%endif%}{% if db.default %}->default({{ db.default}}){%endif%};
{% else %}
            $table->{{db.type}}('{{db.var|snakeCase}}'){% if not db.not_null %}->nullable(){%endif%}{% if db.default %}->default({% if db.type =='boolean' %}{{ db.default}}{% else %}'{{db.default}}'{% endif %}){% endif %};
{% endif %}
{% endfor %}
{% if configs.trait_nested or configs.trait_nestedtree  %}
            //nested
            $table->integer('parent_id')->unsigned()->nullable();
            $table->integer('nest_left')->unsigned()->nullable();
            $table->integer('nest_right')->unsigned()->nullable();
            $table->integer('nest_depth')->unsigned()->nullable();
{% endif %}
{% if configs.trait_simpletree %}
            //simpletree
            $table->integer('parent_id')->unsigned()->nullable();
{% endif %}
{% if configs.trait_reorder %}
            //reorder
            $table->integer('sort_order')->default(0);
{% endif %}
{% if anonymizables %}
            //anaymisation
            $table->boolean('is_anonymized')->default(0);
{% endif %}
{% if configs.trait_soft_delete %}
            //softDelete
            $table->softDeletes();
{% endif %}
{% if not configs.no_timestamps %}
            $table->timestamps();
{% endif %}
        });
    }

    public function down()
    {
        Schema::dropIfExists('{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}');
    }
}