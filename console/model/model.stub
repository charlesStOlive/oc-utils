<?php namespace {{studly_author}}\{{studly_plugin}}\Models;

use Model;
{% for use_classe in configs.use_classes_in_model  %}
use {{ use_classe }};
{% endfor %}

/**
 * {{name}} Model
 */

class {{studly_name}} extends Model
{
    use \Winter\Storm\Database\Traits\Validation;
{% if configs.trait_nested or configs.trait_nestedtree %}
    use \Winter\Storm\Database\Traits\NestedTree;
{% endif %}
{% if configs.trait_simpletree %}
    use \Winter\Storm\Database\Traits\SimpleTree;
{% endif %}
{% if configs.trait_soft_delete %}
    use \Winter\Storm\Database\Traits\SoftDelete;
{% endif %}
{% if configs.trait_reorder %}
    use \Winter\Storm\Database\Traits\Sortable;
{% endif %}
{% if configs.trait_cloudi %}
    use \Waka\Cloudis\Classes\Traits\CloudiTrait;
{% endif %}
{% if configs.trait_datasource %}
    use \Waka\Utils\Classes\Traits\DataSourceHelpers;
{% endif %}
{% if configs.trait_workflow %}
    use \Waka\Utils\Classes\Traits\WakaWorkflowTrait;
{% endif %}
{% if configs.trait_sourcelog %}
    use \Waka\Lp\Classes\Traits\SourceLogTrait;
{% endif %}
{% if configs.trait_wakaPeriode %}
    use \Waka\Utils\Classes\Traits\ScopePeriodes;
{% endif %}
{% if configs.trait_tag %}
    use \Waka\Segator\Classes\Traits\TagTrait;
{% endif %}
{% if configs.trait_informer %}
    use \Waka\Informer\Classes\Traits\InformerTrait;
{% endif %}
{% if configs.trait_wakaContent %}
    use \Waka\Utils\Classes\Traits\WakaContent;
{% endif %}
{% if configs.trait_dbutils %}
    use \Waka\Utils\Classes\Traits\DbUtils;
{% endif %}
{% if configs.trait_babyler_client %}
    use \Waka\Babyler\Classes\Traits\BabylerClient;
{% endif %}
{% if configs.trait_wakaSession %}
    use \Waka\Session\Classes\Traits\WakaSessionTrait;
{% endif %}
{% if anonymizables %}
    use \Waka\Utils\Classes\Traits\WakAnonymize;
{% endif %}


    /**
     * @var string The database table used by the model.
     */
    public $table = '{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}';

{% if configs.string_id %}
    //ID string
    public $incrementing = false;
    protected $keyType = 'string';
{% endif %}
{% if configs.trait_purgeable or configs.trait_workflow  %}
    public $implement = [
        'October.Rain.Database.Behaviors.Purgeable',
    ];
    public $purgeable = [
{% for key,required in purgeables %}
        '{{key}}',
{% endfor %}
    ];
{% endif %}
{% if configs.no_timestamps %}
    /**
     * @var boolean supprime la gestion des timestamps
     */
    public $timestamps = false;
{% endif %}

    /**
     * @var array Guarded fields
     */
{% if configs.guarded == 'NULL' %}
    protected $guarded = [];
{% elseif configs.guarded %}
    protected $guarded = [{{configs.guarded}}];
{% else %}
    protected $guarded = ['id'];
{% endif %}

    /**
     * @var array Fillable fields
     */
    //protected $fillable = [];

    /**
     * @var array Validation rules for attributes
     */
    public $rules = [
{% for key,required in requireds %}
        '{{key}}' => '{{required}}',
{% endfor %}
    ];

    public $customMessages = [
{% for key,error in errors %}
        '{{key}}.required' => '{{lower_author}}.{{lower_plugin}}::{{lower_name}}.e.{{key}}',
{% endfor %}
    ];

    /**
     * @var array attributes send to datasource for creating document
     */
    public $attributesToDs = [
{% for field in attributes %}
{%if field.type is null and field.relation is null %}
        '{{field.var}}',
{% endif %}
{% endfor %}
    ];

{%if anonymizables %}
    /**
     * @var array field anaymisés par wakAnonymize
     */
    public $anonymizeFields = [
{% for anonymizable in anonymizables %}
        '{{anonymizable}}',
{% endfor %}
    ];
{% endif %}

    /**
     * @var array Attributes to be cast to native types
     */
    protected $casts = [];

    /**
     * @var array Attributes to be cast to JSON
     */
    protected $jsonable = [
{% for key,json in jsons %}
        '{{key}}',
{% endfor %}
    ];

    /**
     * @var array Attributes to be appended to the API representation of the model (ex. toArray())
     */
    protected $appends = [
{% for key,append in appends %}
        '{{key}}',
{% endfor %}
    ];

    /**
     * @var array Attributes to be removed from the API representation of the model (ex. toArray())
     */
    protected $hidden = [];

    /**
     * @var array Attributes to be cast to Argon (Carbon) instances
     */
    protected $dates = [
{% if not configs.no_timestamps %}
        'created_at',
        'updated_at',
{% endif %}
{% if configs.trait_soft_delete %}
        'deleted_at',
{% endif %}
{% for key,date in dates %}
        '{{key}}',
{% endfor %}
    ];

/**
    * @var array Spécifié le type d'export à utiliser pour chaque champs
    */
    public $importExportConfig = [
{% for key,value in importExport %}
        '{{key}}' => '{{ value }}',
{% endfor %}
    ]; 

    /**
     * @var array Relations
     */
    public $hasOne = [
{% for relation in modelRelations.hasOne %}
        '{{relation.name }}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $hasMany = [
{% for relation in modelRelations.many %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $hasOneThrough = [
{% for relation in modelRelations.oneThrough %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $hasManyThrough = [
{% for relation in modelRelations.manyThrough %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $belongsTo = [
{% for relation in modelRelations.belong %}
       '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $belongsToMany = [
{% for relation in modelRelations.belongsMany %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];        
    public $morphTo = [
{% for relation in modelRelations.morphTo %}
        '{{relation.name}}' => [],
{% endfor %}
    ];
    public $morphOne = [
{% for relation in modelRelations.morphOne %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $morphMany = [
{% for relation in modelRelations.morphMany %}
        '{{relation.name}}' => {{ relation.relationarray | raw}},
{% endfor %}
    ];
    public $attachOne = [
{% for relation in modelRelations.attachOne %}
        '{{relation.name}}' => {{relation.relationarray | raw}},
{% endfor %}
    ];
    public $attachMany = [
{% for relation in modelRelations.attachMany %}
        '{{relation.name}}' => {{relation.relationarray | raw}},
{% endfor %}
    ];

    //startKeep/

    /**
     *EVENTS
     **/
{% if configs.beforeValidate %}
    public function beforeValidate()
    {

    }

{% endif %}
{% if configs.beforeSave %}
    public function beforeSave() 
    {

    }

{% endif %}
{% if configs.afterSave %}
    public function afterSave() 
    {

    }

{% endif %}
{% if configs.beforeCreate %}
    public function beforeCreate() 
    {

    }

{% endif %}
{% if configs.afterCreate %}
    public function afterCreate() 
    {

    }

{% endif %}
{% if configs.beforeDelete %}
    public function beforeDelete() 
    {

    }

{% endif %}
{% if configs.afterDelete %}
    public function afterDelete() 
    {

    }

{% endif %}

    /**
     * LISTS
     **/
{% for key,list in configs.lists %}
    public function {{ list  }}()
    {
        return [];
    }
{% endfor %}

    /**
     * GETTERS
     **/
{% for key,getter in getters %}
    public function get{{ key | camelCase | ucfirst }}Attribute()
    {
        return 'a configurer';
    }
{% endfor %}

    /**
     * SCOPES
     */

    /**
     * SETTERS
     */
 
    /**
     * FILTER FIELDS
     */
{% if configs.add_filterfields %}
    public function filterFields($fields, $context = null)
    {
        if (!isset($fields->name)) {
            return;
        }
    }

{% endif %}

    /**
     * OTHERS
     */
{% if configs.trait_nested and  configs.add_parent_value %}
    public function getThisParentValue($value)
    {
        if ($this->{$value}) {
            return $this->{$value};
        } else {
            $parents = $this->getParents()->sortByDesc('nest_depth');
            foreach ($parents as $parent) {
                if ($parent->{$value} != null) {
                    return $parent->{$value};
                }
            }
        }
    }
{% endif %}
{% if configs.rapid_links %}
    public function getRapidLinksAttribute()
    {
        return [
            [
                "name" => "Relation Name",
                "href" => url('relations/' . $this->slug),
                "target" => "_blank",
            ],
        ];
    }
{% endif %}

//endKeep/
}